name: Release

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Test and lint
    uses: yamelnychuk/MultiAppTBDExample/.github/workflows/development.yml@main

  buildBackEndServiceA:
    name: Build Backend Service A
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v2
      
      - name: check changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - 'apps/flight-app/**'
      
      - if: steps.changes.outputs.src == 'true'
        name: "🔧 setup buildx"
        uses: docker/setup-buildx-action@v1
      
      - if: steps.changes.outputs.src == 'true'
        name: "🔧 cache docker layers"
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - if: steps.changes.outputs.src == 'true'
        name: "🔧 docker meta"
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ github.repository }}
          tags: latest

      - if: steps.changes.outputs.src == 'true'
        name: "📦 docker build"
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/docker.tar
          push: false
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}

      - if: steps.changes.outputs.src == 'true'
        name: "📂 docker artifacts"
        uses: actions/upload-artifact@v2
        with:
          name: docker
          path: /tmp/docker.tar

  buildFrontEndServiceA:
    name: Build Frontend Service A
    runs-on: ubuntu-latest
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v2
      
      - name: check changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - 'apps/flight-app/**'

      - if: steps.changes.outputs.src == 'true'
        name: "🔧 setup node"
        uses: actions/setup-node@v2.1.5
        with:
          node-version: 16

      - if: steps.changes.outputs.src == 'true'
        name: "🔧 install npm@latest"
        run: npm i -g npm@latest
      
      - if: steps.changes.outputs.src == 'true'
        name: "🔧 install @angular/cli"
        run: npm install -g @angular/cli

      - if: steps.changes.outputs.src == 'true'
        name: "📦 install dependencies"
        uses: bahmutov/npm-install@v1

      - if: steps.changes.outputs.src == 'true'
        name: "🚀 build static app"
        run: ng build flight-app

      - if: steps.changes.outputs.src == 'true'
        name: "📂 save artifacts"
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: dist/apps/flight-app

  deploy2dev:
    environment:
      name: development
      url: https://github.com/${{ github.repository }}/releases/tag/${{ steps.semantic-release.outputs.release-tag }}
    name: Deploy development
    needs:
      - test
      - buildBackEndServiceA
      - buildFrontEndServiceA
    runs-on: ubuntu-latest
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "📂 download docker artifacts"
        uses: actions/download-artifact@v2
        continue-on-error: true
        with:
          name: docker
          path: /tmp

      - name: "📦 load tag"
        continue-on-error: true
        run: |
          docker load --input /tmp/docker.tar
          docker image ls -a

      - name: "📂 download build artifacts"
        uses: actions/download-artifact@v2
        with:
          name: build
          path: dist/apps/flight-app

      - name: "🚀 bump version"
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
  
  integrationTest:
    name: Integration test
    needs:
      - deploy2dev
    runs-on: ubuntu-latest
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: "run test"
        run: echo "Integration test"

  deploy2stage:
    environment:
      name: staging
      url: https://github.com/${{ github.repository }}/releases/tag/${{ steps.semantic-release.outputs.release-tag }}
    name: Deploy staging
    needs:
      - deploy2dev
      - integrationTest
    runs-on: ubuntu-latest
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "📂 download docker artifacts"
        uses: actions/download-artifact@v2
        continue-on-error: true
        with:
          name: docker
          path: /tmp

      - name: "📦 load tag"
        continue-on-error: true
        run: |
          docker load --input /tmp/docker.tar
          docker image ls -a

      - name: "📂 download build artifacts"
        uses: actions/download-artifact@v2
        with:
          name: build
          path: dist/apps/flight-app
    
  e2eTest:
    name: End-to-end test
    needs:
      - deploy2stage
    runs-on: ubuntu-latest
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: "run test"
        run: ng e2e flight-app
    
  deploy2prod:
    environment:
      name: production
      url: https://github.com/${{ github.repository }}/releases/tag/${{ steps.semantic-release.outputs.release-tag }}
    name: Deploy production
    needs:
      - deploy2stage
      - e2eTest
    runs-on: ubuntu-latest
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "📂 download docker artifacts"
        uses: actions/download-artifact@v2
        with:
          name: docker
          path: /tmp

      - name: "📦 load tag"
        run: |
          docker load --input /tmp/docker.tar
          docker image ls -a

      - name: "📂 download build artifacts"
        uses: actions/download-artifact@v2
        with:
          name: build
          path: dist/apps/flight-app
    
  smokeTest:
    name: Smoke test
    needs:
      - deploy2prod
    runs-on: ubuntu-latest
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: "run test"
        run: echo "Smoke test"

  cleanup:
    name: Cleanup actions
    needs:
      - deploy2prod
      - smokeTest
    runs-on: ubuntu-latest
    steps:
      - name: "♻️ remove build artifacts"
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            buildBackEndServiceA
            buildFrontEndServiceA